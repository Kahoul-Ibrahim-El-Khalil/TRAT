/**
 *
 *  TelegramFile.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TelegramFile.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string TelegramFile::Cols::_id = "id";
const std::string TelegramFile::Cols::_message_id = "message_id";
const std::string TelegramFile::Cols::_file_path = "file_path";
const std::string TelegramFile::Cols::_mime_type = "mime_type";
const std::string TelegramFile::Cols::_extension = "extension";
const std::string TelegramFile::Cols::_data = "data";
const std::string TelegramFile::primaryKeyName = "id";
const bool TelegramFile::hasPrimaryKey = true;
const std::string TelegramFile::tableName = "telegram_file";

const std::vector<typename TelegramFile::MetaData> TelegramFile::metaData_={
{"id","int64_t","integer",8,1,1,0},
{"message_id","int64_t","integer",8,0,0,1},
{"file_path","std::string","text",0,0,0,1},
{"mime_type","std::string","text",0,0,0,0},
{"extension","std::string","text",0,0,0,0},
{"data","std::vector<char>","blob",0,0,0,1}
};
const std::string &TelegramFile::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TelegramFile::TelegramFile(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["message_id"].isNull())
        {
            messageId_=std::make_shared<int64_t>(r["message_id"].as<int64_t>());
        }
        if(!r["file_path"].isNull())
        {
            filePath_=std::make_shared<std::string>(r["file_path"].as<std::string>());
        }
        if(!r["mime_type"].isNull())
        {
            mimeType_=std::make_shared<std::string>(r["mime_type"].as<std::string>());
        }
        if(!r["extension"].isNull())
        {
            extension_=std::make_shared<std::string>(r["extension"].as<std::string>());
        }
        if(!r["data"].isNull())
        {
            data_=std::make_shared<std::vector<char>>(r["data"].as<std::vector<char>>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            messageId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            filePath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            mimeType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            extension_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            data_=std::make_shared<std::vector<char>>(r[index].as<std::vector<char>>());
        }
    }

}

TelegramFile::TelegramFile(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            messageId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mimeType_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            extension_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto str = pJson[pMasqueradingVector[5]].asString();
            data_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

TelegramFile::TelegramFile(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("message_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<int64_t>((int64_t)pJson["message_id"].asInt64());
        }
    }
    if(pJson.isMember("file_path"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["file_path"].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson["file_path"].asString());
        }
    }
    if(pJson.isMember("mime_type"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["mime_type"].isNull())
        {
            mimeType_=std::make_shared<std::string>(pJson["mime_type"].asString());
        }
    }
    if(pJson.isMember("extension"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["extension"].isNull())
        {
            extension_=std::make_shared<std::string>(pJson["extension"].asString());
        }
    }
    if(pJson.isMember("data"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["data"].isNull())
        {
            auto str = pJson["data"].asString();
            data_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

void TelegramFile::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            messageId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            mimeType_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            extension_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto str = pJson[pMasqueradingVector[5]].asString();
            data_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

void TelegramFile::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("message_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<int64_t>((int64_t)pJson["message_id"].asInt64());
        }
    }
    if(pJson.isMember("file_path"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["file_path"].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson["file_path"].asString());
        }
    }
    if(pJson.isMember("mime_type"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["mime_type"].isNull())
        {
            mimeType_=std::make_shared<std::string>(pJson["mime_type"].asString());
        }
    }
    if(pJson.isMember("extension"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["extension"].isNull())
        {
            extension_=std::make_shared<std::string>(pJson["extension"].asString());
        }
    }
    if(pJson.isMember("data"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["data"].isNull())
        {
            auto str = pJson["data"].asString();
            data_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

const int64_t &TelegramFile::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &TelegramFile::getId() const noexcept
{
    return id_;
}
void TelegramFile::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
void TelegramFile::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename TelegramFile::PrimaryKeyType & TelegramFile::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int64_t &TelegramFile::getValueOfMessageId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(messageId_)
        return *messageId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &TelegramFile::getMessageId() const noexcept
{
    return messageId_;
}
void TelegramFile::setMessageId(const int64_t &pMessageId) noexcept
{
    messageId_ = std::make_shared<int64_t>(pMessageId);
    dirtyFlag_[1] = true;
}

const std::string &TelegramFile::getValueOfFilePath() const noexcept
{
    static const std::string defaultValue = std::string();
    if(filePath_)
        return *filePath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TelegramFile::getFilePath() const noexcept
{
    return filePath_;
}
void TelegramFile::setFilePath(const std::string &pFilePath) noexcept
{
    filePath_ = std::make_shared<std::string>(pFilePath);
    dirtyFlag_[2] = true;
}
void TelegramFile::setFilePath(std::string &&pFilePath) noexcept
{
    filePath_ = std::make_shared<std::string>(std::move(pFilePath));
    dirtyFlag_[2] = true;
}

const std::string &TelegramFile::getValueOfMimeType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(mimeType_)
        return *mimeType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TelegramFile::getMimeType() const noexcept
{
    return mimeType_;
}
void TelegramFile::setMimeType(const std::string &pMimeType) noexcept
{
    mimeType_ = std::make_shared<std::string>(pMimeType);
    dirtyFlag_[3] = true;
}
void TelegramFile::setMimeType(std::string &&pMimeType) noexcept
{
    mimeType_ = std::make_shared<std::string>(std::move(pMimeType));
    dirtyFlag_[3] = true;
}
void TelegramFile::setMimeTypeToNull() noexcept
{
    mimeType_.reset();
    dirtyFlag_[3] = true;
}

const std::string &TelegramFile::getValueOfExtension() const noexcept
{
    static const std::string defaultValue = std::string();
    if(extension_)
        return *extension_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TelegramFile::getExtension() const noexcept
{
    return extension_;
}
void TelegramFile::setExtension(const std::string &pExtension) noexcept
{
    extension_ = std::make_shared<std::string>(pExtension);
    dirtyFlag_[4] = true;
}
void TelegramFile::setExtension(std::string &&pExtension) noexcept
{
    extension_ = std::make_shared<std::string>(std::move(pExtension));
    dirtyFlag_[4] = true;
}
void TelegramFile::setExtensionToNull() noexcept
{
    extension_.reset();
    dirtyFlag_[4] = true;
}

const std::vector<char> &TelegramFile::getValueOfData() const noexcept
{
    static const std::vector<char> defaultValue = std::vector<char>();
    if(data_)
        return *data_;
    return defaultValue;
}
std::string TelegramFile::getValueOfDataAsString() const noexcept
{
    static const std::string defaultValue = std::string();
    if(data_)
        return std::string(data_->data(),data_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &TelegramFile::getData() const noexcept
{
    return data_;
}
void TelegramFile::setData(const std::vector<char> &pData) noexcept
{
    data_ = std::make_shared<std::vector<char>>(pData);
    dirtyFlag_[5] = true;
}
void TelegramFile::setData(const std::string &pData) noexcept
{
    data_ = std::make_shared<std::vector<char>>(pData.c_str(),pData.c_str()+pData.length());
    dirtyFlag_[5] = true;
}

void TelegramFile::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &TelegramFile::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "message_id",
        "file_path",
        "mime_type",
        "extension",
        "data"
    };
    return inCols;
}

void TelegramFile::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getMessageId())
        {
            binder << getValueOfMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFilePath())
        {
            binder << getValueOfFilePath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMimeType())
        {
            binder << getValueOfMimeType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExtension())
        {
            binder << getValueOfExtension();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getData())
        {
            binder << getValueOfData();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TelegramFile::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void TelegramFile::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getMessageId())
        {
            binder << getValueOfMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFilePath())
        {
            binder << getValueOfFilePath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMimeType())
        {
            binder << getValueOfMimeType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExtension())
        {
            binder << getValueOfExtension();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getData())
        {
            binder << getValueOfData();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TelegramFile::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=(Json::Int64)getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    if(getFilePath())
    {
        ret["file_path"]=getValueOfFilePath();
    }
    else
    {
        ret["file_path"]=Json::Value();
    }
    if(getMimeType())
    {
        ret["mime_type"]=getValueOfMimeType();
    }
    else
    {
        ret["mime_type"]=Json::Value();
    }
    if(getExtension())
    {
        ret["extension"]=getValueOfExtension();
    }
    else
    {
        ret["extension"]=Json::Value();
    }
    if(getData())
    {
        ret["data"]=drogon::utils::base64Encode((const unsigned char *)getData()->data(),getData()->size());
    }
    else
    {
        ret["data"]=Json::Value();
    }
    return ret;
}

std::string TelegramFile::toString() const
{
    return toJson().toStyledString();
}

Json::Value TelegramFile::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getMessageId())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfMessageId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFilePath())
            {
                ret[pMasqueradingVector[2]]=getValueOfFilePath();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getMimeType())
            {
                ret[pMasqueradingVector[3]]=getValueOfMimeType();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getExtension())
            {
                ret[pMasqueradingVector[4]]=getValueOfExtension();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getData())
            {
                ret[pMasqueradingVector[5]]=drogon::utils::base64Encode((const unsigned char *)getData()->data(),getData()->size());
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=(Json::Int64)getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    if(getFilePath())
    {
        ret["file_path"]=getValueOfFilePath();
    }
    else
    {
        ret["file_path"]=Json::Value();
    }
    if(getMimeType())
    {
        ret["mime_type"]=getValueOfMimeType();
    }
    else
    {
        ret["mime_type"]=Json::Value();
    }
    if(getExtension())
    {
        ret["extension"]=getValueOfExtension();
    }
    else
    {
        ret["extension"]=Json::Value();
    }
    if(getData())
    {
        ret["data"]=drogon::utils::base64Encode((const unsigned char *)getData()->data(),getData()->size());
    }
    else
    {
        ret["data"]=Json::Value();
    }
    return ret;
}

bool TelegramFile::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(1, "message_id", pJson["message_id"], err, true))
            return false;
    }
    else
    {
        err="The message_id column cannot be null";
        return false;
    }
    if(pJson.isMember("file_path"))
    {
        if(!validJsonOfField(2, "file_path", pJson["file_path"], err, true))
            return false;
    }
    else
    {
        err="The file_path column cannot be null";
        return false;
    }
    if(pJson.isMember("mime_type"))
    {
        if(!validJsonOfField(3, "mime_type", pJson["mime_type"], err, true))
            return false;
    }
    if(pJson.isMember("extension"))
    {
        if(!validJsonOfField(4, "extension", pJson["extension"], err, true))
            return false;
    }
    if(pJson.isMember("data"))
    {
        if(!validJsonOfField(5, "data", pJson["data"], err, true))
            return false;
    }
    else
    {
        err="The data column cannot be null";
        return false;
    }
    return true;
}
bool TelegramFile::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TelegramFile::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(1, "message_id", pJson["message_id"], err, false))
            return false;
    }
    if(pJson.isMember("file_path"))
    {
        if(!validJsonOfField(2, "file_path", pJson["file_path"], err, false))
            return false;
    }
    if(pJson.isMember("mime_type"))
    {
        if(!validJsonOfField(3, "mime_type", pJson["mime_type"], err, false))
            return false;
    }
    if(pJson.isMember("extension"))
    {
        if(!validJsonOfField(4, "extension", pJson["extension"], err, false))
            return false;
    }
    if(pJson.isMember("data"))
    {
        if(!validJsonOfField(5, "data", pJson["data"], err, false))
            return false;
    }
    return true;
}
bool TelegramFile::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TelegramFile::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
