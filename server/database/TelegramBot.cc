/**
 *
 *  TelegramBot.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TelegramBot.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string TelegramBot::Cols::_id = "id";
const std::string TelegramBot::Cols::_token = "token";
const std::string TelegramBot::Cols::_can_receive_updates = "can_receive_updates";
const std::string TelegramBot::primaryKeyName = "id";
const bool TelegramBot::hasPrimaryKey = true;
const std::string TelegramBot::tableName = "telegram_bot";

const std::vector<typename TelegramBot::MetaData> TelegramBot::metaData_={
{"id","int64_t","integer",8,1,1,0},
{"token","std::string","text",0,0,0,1},
{"can_receive_updates","std::string","boolean",0,0,0,1}
};
const std::string &TelegramBot::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TelegramBot::TelegramBot(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["token"].isNull())
        {
            token_=std::make_shared<std::string>(r["token"].as<std::string>());
        }
        if(!r["can_receive_updates"].isNull())
        {
            canReceiveUpdates_=std::make_shared<std::string>(r["can_receive_updates"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            token_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            canReceiveUpdates_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

TelegramBot::TelegramBot(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            canReceiveUpdates_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

TelegramBot::TelegramBot(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("can_receive_updates"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["can_receive_updates"].isNull())
        {
            canReceiveUpdates_=std::make_shared<std::string>(pJson["can_receive_updates"].asString());
        }
    }
}

void TelegramBot::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            canReceiveUpdates_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void TelegramBot::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("can_receive_updates"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["can_receive_updates"].isNull())
        {
            canReceiveUpdates_=std::make_shared<std::string>(pJson["can_receive_updates"].asString());
        }
    }
}

const int64_t &TelegramBot::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &TelegramBot::getId() const noexcept
{
    return id_;
}
void TelegramBot::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
void TelegramBot::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename TelegramBot::PrimaryKeyType & TelegramBot::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &TelegramBot::getValueOfToken() const noexcept
{
    static const std::string defaultValue = std::string();
    if(token_)
        return *token_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TelegramBot::getToken() const noexcept
{
    return token_;
}
void TelegramBot::setToken(const std::string &pToken) noexcept
{
    token_ = std::make_shared<std::string>(pToken);
    dirtyFlag_[1] = true;
}
void TelegramBot::setToken(std::string &&pToken) noexcept
{
    token_ = std::make_shared<std::string>(std::move(pToken));
    dirtyFlag_[1] = true;
}

const std::string &TelegramBot::getValueOfCanReceiveUpdates() const noexcept
{
    static const std::string defaultValue = std::string();
    if(canReceiveUpdates_)
        return *canReceiveUpdates_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TelegramBot::getCanReceiveUpdates() const noexcept
{
    return canReceiveUpdates_;
}
void TelegramBot::setCanReceiveUpdates(const std::string &pCanReceiveUpdates) noexcept
{
    canReceiveUpdates_ = std::make_shared<std::string>(pCanReceiveUpdates);
    dirtyFlag_[2] = true;
}
void TelegramBot::setCanReceiveUpdates(std::string &&pCanReceiveUpdates) noexcept
{
    canReceiveUpdates_ = std::make_shared<std::string>(std::move(pCanReceiveUpdates));
    dirtyFlag_[2] = true;
}

void TelegramBot::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &TelegramBot::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "token",
        "can_receive_updates"
    };
    return inCols;
}

void TelegramBot::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCanReceiveUpdates())
        {
            binder << getValueOfCanReceiveUpdates();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TelegramBot::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void TelegramBot::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCanReceiveUpdates())
        {
            binder << getValueOfCanReceiveUpdates();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TelegramBot::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getCanReceiveUpdates())
    {
        ret["can_receive_updates"]=getValueOfCanReceiveUpdates();
    }
    else
    {
        ret["can_receive_updates"]=Json::Value();
    }
    return ret;
}

std::string TelegramBot::toString() const
{
    return toJson().toStyledString();
}

Json::Value TelegramBot::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getToken())
            {
                ret[pMasqueradingVector[1]]=getValueOfToken();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCanReceiveUpdates())
            {
                ret[pMasqueradingVector[2]]=getValueOfCanReceiveUpdates();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getCanReceiveUpdates())
    {
        ret["can_receive_updates"]=getValueOfCanReceiveUpdates();
    }
    else
    {
        ret["can_receive_updates"]=Json::Value();
    }
    return ret;
}

bool TelegramBot::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(1, "token", pJson["token"], err, true))
            return false;
    }
    else
    {
        err="The token column cannot be null";
        return false;
    }
    if(pJson.isMember("can_receive_updates"))
    {
        if(!validJsonOfField(2, "can_receive_updates", pJson["can_receive_updates"], err, true))
            return false;
    }
    return true;
}
bool TelegramBot::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TelegramBot::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(1, "token", pJson["token"], err, false))
            return false;
    }
    if(pJson.isMember("can_receive_updates"))
    {
        if(!validJsonOfField(2, "can_receive_updates", pJson["can_receive_updates"], err, false))
            return false;
    }
    return true;
}
bool TelegramBot::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TelegramBot::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
